shiny::runApp()
library(shiny)
#------------------
# UI for application that shows a french word
#------------------
pageWithSidebar(
headerPanel("actionButton test"),
sidebarPanel(
#numericInput("n", "N:", min = 0, max = 100, value = 50),
#br(),
actionButton("goButton", "Go!"),
p("Click the button to update the French word displayed in the main panel.")
),
mainPanel(
verbatimTextOutput("nText")
)
)
#------------------
# Server Logic that shows a french word
#------------------
function(input, output) {
# builds a reactive expression that only invalidates
# when the value of input$goButton becomes out of date
# (i.e., when the button is pressed)
ntext <- eventReactive(input$goButton, {
#input$n
#fetch a word from the file
"Test"
})
output$nText <- renderText({
ntext()
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
runApp('DisplayFrench')
install.packages(googlesheets)
library(googlesheets)
library(shiny)
install.packages("googlesheets")
library(googlesheets)
library(shiny)
gs_auth(new_user = TRUE)
dat.words <-
fetchgoogle("https://docs.google.com/spreadsheets/d/e/2PACX-1vTxGsugPOVT3A5339ZiHK46q6FATBU1gRQlwyUp5Z3R17iK5zFgCV09Cm5JtvA0HgyH7CIjrCPEFngm/pub?gid=0&single=true&output=csv")
dat.words <-
fetchGoogle("https://docs.google.com/spreadsheets/d/e/2PACX-1vTxGsugPOVT3A5339ZiHK46q6FATBU1gRQlwyUp5Z3R17iK5zFgCV09Cm5JtvA0HgyH7CIjrCPEFngm/pub?gid=0&single=true&output=csv")
require(mosaic)
install.packages("mosaic")
dat.words <-
fetchGoogle("https://docs.google.com/spreadsheets/d/e/2PACX-1vTxGsugPOVT3A5339ZiHK46q6FATBU1gRQlwyUp5Z3R17iK5zFgCV09Cm5JtvA0HgyH7CIjrCPEFngm/pub?gid=0&single=true&output=csv")
#gs_auth(new_user = TRUE)
dat.words <-
fetchgoogle("https://docs.google.com/spreadsheets/d/e/2PACX-1vTxGsugPOVT3A5339ZiHK46q6FATBU1gRQlwyUp5Z3R17iK5zFgCV09Cm5JtvA0HgyH7CIjrCPEFngm/pub?gid=0&single=true&output=csv")
Load libraries
#------------------
require(mosaic)
library(Rcurl)
library(googlesheets)
library(shiny)
#------------------
# Load words
#------------------
#gs_auth(new_user = TRUE)
dat.words <-
fetchgoogle("https://docs.google.com/spreadsheets/d/e/2PACX-1vTxGsugPOVT3A5339ZiHK46q6FATBU1gRQlwyUp5Z3R17iK5zFgCV09Cm5JtvA0HgyH7CIjrCPEFngm/pub?gid=0&single=true&output=csv")
dat.words<- fetchdata("https://drive.google.com/uc?export=download&id=e")
#------------------
# UI for application that shows a french word
#------------------
ui<-
pageWithSidebar(
headerPanel("actionButton test"),
sidebarPanel(
#numericInput("n", "N:", min = 0, max = 100, value = 50),
#br(),
actionButton("goButton", "Go!"),
p("Click the button to update the French word displayed in the main panel.")
),
mainPanel(
verbatimTextOutput("nText")
)
)
#------------------
# Server Logic that shows a french word
#------------------
server<-
function(input, output) {
# builds a reactive expression that only invalidates
# when the value of input$goButton becomes out of date
# (i.e., when the button is pressed)
ntext <- eventReactive(input$goButton, {
#input$n
#fetch a word from the file
"Test"
})
output$nText <- renderText({
ntext()
})
}
# Run the application
shinyApp(ui = ui, server = server)
#gs_auth(new_user = TRUE)
dat.words <-
fetchGoogle("https://docs.google.com/spreadsheets/d/e/2PACX-1vTxGsugPOVT3A5339ZiHK46q6FATBU1gRQlwyUp5Z3R17iK5zFgCV09Cm5JtvA0HgyH7CIjrCPEFngm/pub?gid=0&single=true&output=csv")
library(googlesheets)
dat.words <-
fetchGoogle("https://docs.google.com/spreadsheets/d/e/2PACX-1vTxGsugPOVT3A5339ZiHK46q6FATBU1gRQlwyUp5Z3R17iK5zFgCV09Cm5JtvA0HgyH7CIjrCPEFngm/pub?gid=0&single=true&output=csv")
my_sheets <- gs_ls()
library(googlesheets4)
install.packages("googlesheets4")
library(googlesheets4)
install.packages("googlesheets4")
sheets_deauth()
dat.words <-
read_sheet("https://docs.google.com/spreadsheets/d/e/2PACX-1vTxGsugPOVT3A5339ZiHK46q6FATBU1gRQlwyUp5Z3R17iK5zFgCV09Cm5JtvA0HgyH7CIjrCPEFngm/pub?gid=0&single=true&output=csv")
install.packages("googlesheets4")
install.packages("fs")
intall.packages(googlesheets4)
install.packages("googlesheets4")
#------------------
# Load words
#------------------
update.packages ()
install.packages(c("curl", "dplyr", "forcats", "fs", "ggplot2", "glmmTMB", "glue", "Gmisc", "Hmisc", "hms", "jtools", "knitr", "lme4", "lmerTest", "lmtest", "lobstr", "lubridate", "plyr", "ps", "purrr", "RCurl", "reshape2", "rlang", "rmarkdown", "rstudioapi", "scales", "selectr", "shiny"))
install.packages("googlesheets4")
install.packages("gargle")
library("fs", lib.loc="~/R/win-library/3.4")
update.packages("fs")
detach("package:fs", unload=TRUE)
update.packages("fs")
library("fs", lib.loc="~/R/win-library/3.4")
remove.packages("fs", lib="~/R/win-library/3.4")
install.packages("fs")
install.packages("fs")
apt-get install r-cran-fs
#install.packages("packageName", type = "source")
install.packages("fs", type = "source") # because binary is older, and too old for gargle, which is a dependency of googlesheets4
install.packages("fs", type = "source")
install.packages("devtools")
install.packages("devtools")
install.packages("fs", type = "source") # because binary is older, and too old for gargle, which is a dependency of googlesheets4
require(mosaic)
library(googlesheets4)
install.packages("googlesheets4")
sheets_deauth() #otherwise need to give google authorization key
library(googlesheets4)
dat.words <-
as_("https://docs.google.com/spreadsheets/d/e/2PACX-1vTxGsugPOVT3A5339ZiHK46q6FATBU1gRQlwyUp5Z3R17iK5zFgCV09Cm5JtvA0HgyH7CIjrCPEFngm/pub?gid=0&single=true&output=csv")
dat.words <-
as_sheets_id("https://docs.google.com/spreadsheets/d/e/2PACX-1vTxGsugPOVT3A5339ZiHK46q6FATBU1gRQlwyUp5Z3R17iK5zFgCV09Cm5JtvA0HgyH7CIjrCPEFngm/pub?gid=0&single=true&output=csv")
dat.words <-
as_sheets_id("https://docs.google.com/spreadsheets/d/e/2PACX-1vTxGsugPOVT3A5339ZiHK46q6FATBU1gRQlwyUp5Z3R17iK5zFgCV09Cm5JtvA0HgyH7CIjrCPEFngm/pub?gid=0&single=true&output=csv") %>%
read_sheet()
dat.words <-
read_sheet("https://docs.google.com/spreadsheets/d/e/2PACX-1vTxGsugPOVT3A5339ZiHK46q6FATBU1gRQlwyUp5Z3R17iK5zFgCV09Cm5JtvA0HgyH7CIjrCPEFngm/pub?gid=0&single=true&output=csv")
